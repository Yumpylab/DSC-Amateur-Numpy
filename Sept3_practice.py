Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:43:08) [MSC v.1926 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> import numpy as np
>>> np.random.randint(5)
2
>>> np.random.randint(5, size=7)
array([2, 2, 4, 2, 3, 0, 4])
>>> np.random.randint(2,10, size=(3,2))
array([[2, 7],
       [2, 2],
       [6, 6]])
>>> np.random.randint(2,10, size=(3,3))
array([[3, 7, 9],
       [9, 5, 5],
       [7, 6, 7]])
>>> np.random.rand(8)
array([0.94188343, 0.43173282, 0.85106297, 0.77883508, 0.87682214,
       0.37103515, 0.68274588, 0.79991436])
>>> np.random.random(8)
array([0.8571083 , 0.9395317 , 0.47739894, 0.22875359, 0.10187038,
       0.07919747, 0.37886892, 0.24232276])
>>> np.random.randn(100)
array([ 0.96653341,  1.07659226, -1.28067906, -1.20328888, -0.82717919,
        0.51234472, -1.37935608,  1.51670867, -0.9108852 ,  0.56552375,
        0.25748295, -1.37181419, -0.54265316,  0.83820654,  1.15802985,
       -0.52737043, -0.55961875, -0.59778865, -2.5191982 ,  0.90270456,
       -0.11035112,  1.61292784, -0.17509596, -0.86336314,  0.86067623,
        0.74294253,  0.50324606,  0.4398955 , -0.06338658, -0.75792877,
        0.56277487, -0.08814651,  0.8596917 , -0.56387208, -0.97016914,
       -0.68891614, -0.21362433, -0.46149523, -0.4873102 ,  0.00914488,
       -0.50386949, -1.15477856, -1.53012068,  1.88074282,  0.32550719,
       -0.43540375,  1.0258276 , -0.03914688, -0.83304073,  0.35202713,
        1.6921601 , -0.66170909, -1.36308268,  1.0703424 , -0.50839052,
        1.09466492,  0.16996534,  0.48298453, -0.22484064,  1.52375658,
       -0.30222284, -0.25528773,  0.0913371 , -0.71272921, -0.94129898,
       -0.0949201 , -1.30350199, -0.60117962,  0.5364437 , -1.12373653,
        0.56566736, -1.10046296, -0.94680312, -1.07095622, -0.85881265,
        0.54571303, -0.63412347,  0.22165507,  1.0738996 , -0.60494144,
        1.46466188, -1.24306235, -0.11936903, -0.49466849,  0.92755807,
       -0.04648557, -1.29808017,  0.93186332,  1.45225031, -0.95842782,
        1.79829388,  0.3104031 , -0.27377404, -1.03997669, -0.61548446,
        1.0558536 , -0.4320233 , -0.11661456,  0.20948572,  0.9826603 ])
>>> np.random.randn(100).mean()
-0.011219217066027565
>>> np.random.randn(100).mean()
0.029211238562920423
>>> np.random.randn(100).std()
1.0547664148665368
>>> np.ones(4,3)
Traceback (most recent call last):
  File "<pyshell#11>", line 1, in <module>
    np.ones(4,3)
  File "C:\Users\KALESANWO YOMI\AppData\Local\Programs\Python\Python38-32\lib\site-packages\numpy\core\numeric.py", line 192, in ones
    a = empty(shape, dtype, order)
TypeError: Cannot interpret '3' as a data type
>>> np.ones((4,3))
array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])
>>> np.zeros(10)
array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
>>> np.zeros((2,3))
array([[0., 0., 0.],
       [0., 0., 0.]])
>>> np.eye(3)
array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])
>>> np.identity(3)
array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])
>>> 
>>> np.arange(3,7)
array([3, 4, 5, 6])
>>> np.arange(2,9,2)
array([2, 4, 6, 8])
>>> 
>>> np.full((3,4), 8)
array([[8, 8, 8, 8],
       [8, 8, 8, 8],
       [8, 8, 8, 8]])
>>> np.full((3,4), 4.5)
array([[4.5, 4.5, 4.5, 4.5],
       [4.5, 4.5, 4.5, 4.5],
       [4.5, 4.5, 4.5, 4.5]])
>>> np.full((3,4), 8, dtype= 'floats')
Traceback (most recent call last):
  File "<pyshell#23>", line 1, in <module>
    np.full((3,4), 8, dtype= 'floats')
  File "C:\Users\KALESANWO YOMI\AppData\Local\Programs\Python\Python38-32\lib\site-packages\numpy\core\numeric.py", line 314, in full
    a = empty(shape, dtype, order)
TypeError: data type 'floats' not understood
>>> np.full((3,4), 8, dtype='float')
array([[8., 8., 8., 8.],
       [8., 8., 8., 8.],
       [8., 8., 8., 8.]])
>>> 
>>> 
>>> A= np.random.randint(5, size=(3,4))
>>> A
array([[0, 4, 1, 4],
       [3, 3, 1, 1],
       [4, 0, 4, 2]])
>>> A.ravel()
array([0, 4, 1, 4, 3, 3, 1, 1, 4, 0, 4, 2])
>>> A.ravel(order= 'F')
array([0, 3, 4, 4, 3, 0, 1, 1, 4, 4, 1, 2])
>>> 
>>> 
>>> A.shape
(3, 4)
>>> A.size
12
>>> A.reshape(4,3)
array([[0, 4, 1],
       [4, 3, 3],
       [1, 1, 4],
       [0, 4, 2]])
>>> A.reshape(2,6)
array([[0, 4, 1, 4, 3, 3],
       [1, 1, 4, 0, 4, 2]])
>>> A.reshape(-1,3)
array([[0, 4, 1],
       [4, 3, 3],
       [1, 1, 4],
       [0, 4, 2]])
>>> 
>>> 
>>> A
array([[0, 4, 1, 4],
       [3, 3, 1, 1],
       [4, 0, 4, 2]])
>>> A.transpose
<built-in method transpose of numpy.ndarray object at 0x00A777C8>
>>> A.transpose()
array([[0, 3, 4],
       [4, 3, 0],
       [1, 1, 4],
       [4, 1, 2]])
>>> 
>>> 
>>> A= np.random.randint(5, size=(4,3))
>>> A
array([[3, 4, 0],
       [3, 0, 2],
       [1, 1, 0],
       [4, 4, 2]])
>>> np.vsplit(A, 2)
[array([[3, 4, 0],
       [3, 0, 2]]), array([[1, 1, 0],
       [4, 4, 2]])]
>>> A= np.random.randint(5, size=(6,3))
>>> A
array([[0, 0, 3],
       [3, 4, 1],
       [2, 3, 1],
       [2, 4, 1],
       [4, 1, 4],
       [0, 4, 3]])
>>> np.vsplit(A,3)
[array([[0, 0, 3],
       [3, 4, 1]]), array([[2, 3, 1],
       [2, 4, 1]]), array([[4, 1, 4],
       [0, 4, 3]])]
>>> np.vsplit(A,3)[0]
array([[0, 0, 3],
       [3, 4, 1]])
>>> 
>>> 
>>> a= np.array([[111,3,4,5,9,10]])
>>> np.hsplit(a,2)
[array([[111,   3,   4]]), array([[ 5,  9, 10]])]
>>> A= np.random.randint(5, size=(6,3))
>>> A
array([[0, 4, 1],
       [3, 1, 1],
       [2, 0, 1],
       [1, 1, 4],
       [2, 1, 1],
       [0, 2, 2]])
>>> np.hsplit(A,3)
[array([[0],
       [3],
       [2],
       [1],
       [2],
       [0]]), array([[4],
       [1],
       [0],
       [1],
       [1],
       [2]]), array([[1],
       [1],
       [1],
       [4],
       [1],
       [2]])]
>>> np.hsplit(A,3)[0]
array([[0],
       [3],
       [2],
       [1],
       [2],
       [0]])
>>> np.hsplit(A,3)[0].shape
(6, 1)
>>> 
>>> 
>>> a= np.array([1,2,3,4])
>>> b= np.array([3,3,3,3])
>>> np.concatenate((a,b))
array([1, 2, 3, 4, 3, 3, 3, 3])
>>> np.concatenate((a.reshape(-1,1), b.reshape(-1,1)), axis=1)
array([[1, 3],
       [2, 3],
       [3, 3],
       [4, 3]])
>>> 